from flask import render_template, flash, redirect, session, url_for, request, g
from flask.ext.login import login_user, logout_user, current_user, login_required
from app import app, db, lm, models
from forms import LoginForm, SignUpForm, Tweet
from models import User, Post


@app.before_request
def before_request():
    g.user = current_user


@app.route('/')
@app.route('/index')
@app.route('/feed')
def index():
    user = g.user
    posts = [
        {
             'author': { 'nickname': 'Sherlock'},
             'text': 'If inconvenient, come anyway.'
        },
        { 
             'author': { 'nickname': 'Moriarty'},
             'text': 'I will BURN the heart out of you.'
        }
    ]
    return render_template("index.html",
        title = "Home",
        user = user,
        posts = posts)



@lm.user_loader
def load_user(id):
    return models.User.query.filter_by(id=id).first()





@app.route('/login', methods =  ['GET', 'POST'])
# @oid.loginhandler
def login():

    if g.user is not None and g.user.is_authenticated():
        print ("USER IS NOT NONE IT ISNT")
        return redirect(url_for('index'))
    form_l = LoginForm()
    form_s = SignUpForm()

    if form_l.validate_on_submit():
        print ("LOGIN SUBMIT SUBMIT LOGIN OH MY GOSH ")
        session['remember_me'] = form_l.remember_me.data
        user = db.session.query(User).filter(User.email == form_l.openid.data).filter(User.password == form_l.password.data).first()
        if user is not None:
            print ("user not none, calm down ")
            login_user(user, remember = form_l.remember_me.data)
            return redirect(url_for('feed')) 
        else: 
            print("NOT FOUND")
        
    if form_s.validate_on_submit():
        print ("REGISTRATION SUBMIT SUBMIT REGISTRATE!!")
        k = False
        user = db.session.query(User).filter(User.email == form_s.email.data  or  User.nickname == form_s.login.data).first()
        if user is None:
            u = User(nickname=form_s.login.data, email=form_s.email.data, password=form_s.password.data)
            db.session.add(u)
            db.session.commit()
            login_user(u)
            print ("logged")
            return redirect(url_for('feed')) 
        else:
            print("EXISTS")
            
    print("ya sdelyal ")
 
    return render_template('login.html',
        form_l = form_l,
        form_s = form_s)


@app.route('/feed', methods =  ['GET', 'POST'])
def feed():
    form_tw = Tweet()
    if form_tw.validate_on_submit() and (form_tw.text.data is not None):
        p = Post(user_id=user.id, text=form_tw.text.data)
        db.session.add(p)
        db.session.commit()
  
    return render_template('feed.html')


@app.route('/logout')
def logout():
    logout_user()
    print ("successfully logged out")
    return redirect(url_for('login'))



""" @oid.after_login
def after_login(resp):
    if resp.email is None or resp.email=="":
        flash('Invalid Login, please, try again')
        return redirect(url_for('login'))

    user = User.query.filter_by(email = resp.emaSQLALCHEMY_DATABASE_URI, SQLALCHEMY_MIGRATE_REPOSQLALCHEMY_DATABASE_URI, SQLALCHEMY_MIGRATE_REPOil).first()
    if user is None:
        nickname = resp.nickname
        if nickname is None or nickname=="":
            nickname = email.split('@')[0] 
        user = User(nickname = nickname, email = resp.email)
        db.session.add(user)
        db.session.commit()
    remember_me = False
    if 'remember_me' in session:
        remember_me = session['remember_me']
        session.pop('remember_me', None)
SQLALCHEMY_DATABASE_URI, SQLALCHEMY_MIGRATE_REPO    login_user(user, remember = remember_me)

    return redirect(request.args.get(next) or url_for('index'))
"""
